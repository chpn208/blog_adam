<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://chpn208.github.io/blog_adm/</id>
    <title>大浪淘沙</title>
    <updated>2020-05-09T14:47:02.106Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://chpn208.github.io/blog_adm/"/>
    <link rel="self" href="https://chpn208.github.io/blog_adm/atom.xml"/>
    <subtitle>宠辱不惊 看庭前花开花落&lt;br&gt;
去留无意 望天上云卷云舒</subtitle>
    <logo>https://chpn208.github.io/blog_adm/images/avatar.png</logo>
    <icon>https://chpn208.github.io/blog_adm/favicon.ico</icon>
    <rights>All rights reserved 2020, 大浪淘沙</rights>
    <entry>
        <title type="html"><![CDATA[原型模式]]></title>
        <id>https://chpn208.github.io/blog_adm/post/yuan-xing-mo-shi/</id>
        <link href="https://chpn208.github.io/blog_adm/post/yuan-xing-mo-shi/">
        </link>
        <updated>2020-05-07T13:55:25.000Z</updated>
        <content type="html"><![CDATA[<p>原型模式<img src="https://chpn208.github.io/blog_adm//post-images/1589034391644.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[工厂模式]]></title>
        <id>https://chpn208.github.io/blog_adm/post/gong-han-mo-shi/</id>
        <link href="https://chpn208.github.io/blog_adm/post/gong-han-mo-shi/">
        </link>
        <updated>2020-05-07T13:54:45.000Z</updated>
        <content type="html"><![CDATA[<p>工厂模式</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[单例模式]]></title>
        <id>https://chpn208.github.io/blog_adm/post/dan-li-mo-shi/</id>
        <link href="https://chpn208.github.io/blog_adm/post/dan-li-mo-shi/">
        </link>
        <updated>2020-05-07T13:53:43.000Z</updated>
        <content type="html"><![CDATA[<p>单例模式</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[UML及类图关系介绍]]></title>
        <id>https://chpn208.github.io/blog_adm/post/uml-ji-lei-tu-guan-xi-jie-shao/</id>
        <link href="https://chpn208.github.io/blog_adm/post/uml-ji-lei-tu-guan-xi-jie-shao/">
        </link>
        <updated>2020-05-07T13:51:39.000Z</updated>
        <content type="html"><![CDATA[<p>adfadf</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[设计模式七大原则]]></title>
        <id>https://chpn208.github.io/blog_adm/post/she-ji-mo-shi-qi-da-yuan-ze/</id>
        <link href="https://chpn208.github.io/blog_adm/post/she-ji-mo-shi-qi-da-yuan-ze/">
        </link>
        <updated>2020-05-07T13:04:48.000Z</updated>
        <content type="html"><![CDATA[<h1 id="设计模式七大原则">设计模式七大原则</h1>
<p>设计模式体现了代码的耦合性，内聚性以及可维护性，可扩展性，灵活性</p>
<ol>
<li>代码重用性（即：相同功能的代码，不用多次编写）</li>
<li>可读性（即：编程规范性，便于其他程序员的阅读和理解）</li>
<li>可扩展性（即：当需要增加新的功能后，非常的方便，称为可维护）</li>
<li>可靠性（即：当我们增加新的功能后，对原来的功能没有影响）</li>
<li>使程序呈现 <strong>高内聚，低耦合</strong>的特性</li>
</ol>
<h2 id="一-单一职责原则single-responibi">一、单一职责原则（Single responibi）</h2>
<p>单一职责原则注意事项和细节</p>
<ol>
<li>降低类的复杂度，一个类只负责一项职责</li>
<li>提高类的可读性，可维护性</li>
<li>降低变更引起的风险</li>
<li>通常性况下，应当遵守单一职责原则，只有逻辑足够简单，才可以在方法级违反单一职责原则</li>
</ol>
<pre><code class="language-java">public class MainClass {
    public static void main(String[] args) {
        Sing sing = new Sing();
        sing.singChinese();
        sing.singEnglish();
    }
}

class Sing{
    public void singEnglish(){
        System.out.println(&quot;sing english&quot;);
    }

    public void singChinese(){
        System.out.println(&quot;唱中国歌&quot;);
    }
}

</code></pre>
<p>总结：一个类应该只负责一个职责。如类A负责两个不同职责：职责1，职责2。当职责1需求变更而改变A时，可能造成职责2执行错误，所以需要将类A的粒度分解为A1，A2。</p>
<p>注：<u><font color='red'>以上代码是在方法级违反单一原则</font></u></p>
<h2 id="二-接口隔离原则">二、接口隔离原则</h2>
<p>基本介绍</p>
<ol>
<li>客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立 在最小的接口上</li>
<li>图例<img src="https://chpn208.github.io/blog_adm//post-images/1588991718171.png" alt="" loading="lazy">
<ol>
<li>类A通过接口依赖类B,类C通过接口依赖类D，如果接口Interface1对于类A和类C来说不是最小接口那么类B和类D必须去实现他们不需要的方法</li>
<li>按接口隔离原则，应当将接口拆分为独立的风个接口，类A和类C分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则。</li>
</ol>
</li>
<li>改进 <img src="https://chpn208.github.io/blog_adm//post-images/1588992966018.png" alt="" loading="lazy"></li>
</ol>
<p>对于类B而言，对于它的调用者来说，只需要B的最小接口方法的实现，所以，没必要去实现不被调用的 operatoion4,operation5。</p>
<p>关于controller、service、层的一些思考</p>
<p>对于一个项目而言，会有分层的思想，controller、service、dao。<br>
<img src="https://chpn208.github.io/blog_adm//post-images/1588993618399.png" alt="" loading="lazy"></p>
<p>在Controller层，UserController类对Service层 IService的依赖，也许并不需要update与del方法，故而，在这种设计上违法了接口隔离原则</p>
<p>改进<img src="https://chpn208.github.io/blog_adm//post-images/1588994301104.png" alt="" loading="lazy"></p>
<p>对于抽象类的实现而言，自己去处理要实现的逻辑 valiad(),process() 参数较验与处理，抽象类只负责暴露方法process()给其调用者，从而达到接口隔离的效果（PS:以及单一职责原则）</p>
<h2 id="三-依赖倒转原则">三、依赖倒转原则</h2>
<ol>
<li>高层的模块不应该依赖低层模块，二者者应该依赖其抽象</li>
<li>抽象不应该依赖细节，细节应该依赖抽象</li>
<li>依赖倒转的中心思想是面向接口编程</li>
<li>依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在java中，抽象指的是接口或抽象类，细节就是具体的实现类</li>
<li>使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成</li>
</ol>
<p><u><font color='red'>总结：依赖高层的接口，不依赖底层的细节</font></u></p>
<pre><code class="language-java">public class MainClass {
    public static void main(String[] args) {
        IService&lt;User&gt; iService = new UserServiceImpl();
        iService.add(new User());
    }
}

interface IService&lt;T&gt;{
    void add(T t);
}

class UserServiceImpl implements IService&lt;User&gt;{
    @Override
    public void add(User user) {
        System.out.println(&quot;save user:&quot;+user.toString());
    }
}

class User{
}

</code></pre>
<p>依赖倒转原则的注意事项和细节</p>
<ol>
<li>低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好</li>
<li>变量的声明类型尽量是抽象类或接口，这样我们的变量引用和实际对象间，就存在一个缓冲层，利于程序扩展和优化</li>
<li>继承时遵循<font color='red'>里氏替换原则</font></li>
</ol>
<h2 id="四-里氏替换原则">四、里氏替换原则</h2>
<p><strong>OO中的继承性思考和说明</strong></p>
<ol>
<li>继承包含这样一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然它不强制要求所有的子类必须遵循这些契约，但是如果子类对这些已经实现方法任意修改，就会对整个继承体系造成破坏</li>
<li>继承在给程序设计带来便利的同时，也带来的弊端。比如使用继承会给程序带来侵入性，程序的可移植性降低，增加对象间的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子类的功能都有可能产生故障</li>
<li><font color='red'>在编程中，如何正确的使用继承？-&gt; 里低替换原则</font></li>
</ol>
<p><strong>基本介绍</strong></p>
<ol>
<li>如果对每个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都代换成o2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型。换句话说，<font color='red'>所有引用基类的地方必须能透明地使用其子类的对象</font>。</li>
<li>在使用继承时，遵循里氏替换原则，<font color='red'>在子类中尽量不要重写父类的方法</font></li>
<li>里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下，可以通过聚合，组合，依赖来解决问题</li>
</ol>
<h2 id="五-开闭原则">五、开闭原则</h2>
<ol>
<li>开闭原则（Open Closed Principle）是编程中最基础、最重要的设计原则</li>
<li>一个软件实体如类，模块和函数应该<font color='red'>对扩展开放（对提供方），对修改关闭（对使用方）</font>。用抽象构建框架，用实现扩展细节</li>
<li>当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化</li>
<li>编程中遵循其它原则，以及使用设计模式的目的就是遵循<strong>开闭原则</strong></li>
</ol>
<pre><code class="language-java">class GraphicEditor{
    public void drawShape(Sharp s){
        if (s.mType == 1){
            System.out.println(&quot;矩形&quot;);
        }else if (s.mType == 2){
            System.out.println(&quot;圆形&quot;);
        }
    }
}

class Sharp{
    int mType;
}

class Rectangle extends Sharp{
    Rectangle(){
        super.mType = 1;
    }
}
class Circle extends Sharp{
    Circle(){
        super.mType = 2;
    }
}
</code></pre>
<p><img src="https://chpn208.github.io/blog_adm//post-images/1589033525592.png" alt="" loading="lazy"><br>
问题分析：</p>
<p>如果有新的Sharp添加进来的时候，GraphicEditor.drawShape要添加类型判断，这样违反了开闭原则，<font color='red'>对扩展开放（对提供方），对修改关闭（对使用方）</font>。</p>
<p>改进：</p>
<pre><code class="language-java">class GraphicEditor{
    public void drawShape(Sharp s){
       s.draw();
    }
}

interface Sharp{
    void draw();
}

class Rectangle implements Sharp{

    @Override
    public void draw() {
        System.out.println(&quot;矩形&quot;);
    }
}
class Circle implements Sharp{
    @Override
    public void draw() {
        System.out.println(&quot;圆形&quot;);
    }
}
</code></pre>
<p>说明：将Sharp抽象成一个接口，定义一个draw方法，交由其子类去实现，在调用方只负责调用该方法。从而，在添加新的Sharp时，只要添加Sharp的实现就行了（扩展）。对于调用方，无需要改动（修改）。</p>
<p><font color='red'>对扩展开放（对提供方），对修改关闭（对调用方）</font><br>
<img src="https://chpn208.github.io/blog_adm//post-images/1589033538759.png" alt="" loading="lazy"></p>
<h2 id="六-迪米特法则">六、迪米特法则</h2>
<p>基本介绍</p>
<ol>
<li>一个对象应该对其他对象保持最少的了解</li>
<li>类与类关系越密切，耦合度越大</li>
<li>迪米特法则（Demeter Principle）又叫<strong>最少知道原则</strong>，即一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的public方法，不对外泄露任何信息</li>
<li>迪米特法则还有个更简单的定义：只与直接的朋友通信</li>
<li><font color='red'>直接的朋友</font>：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多：依赖，关联，组合，聚合等。其中，我们称出<strong>现成员变量，方法参数，方法返回值中的类为直接朋友</strong>，而<strong>出现在局部变量中的类不是直接朋友</strong>。也就是说，<font color='red'>陌生的类最好不要以局部变量的形式出现在类的内部</font>。</li>
</ol>
<h2 id="七-合成复用原则">七、合成复用原则</h2>
]]></content>
    </entry>
</feed>